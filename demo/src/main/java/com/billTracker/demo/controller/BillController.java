package com.billTracker.demo.controller;

import com.billTracker.demo.model.Bill;
import com.billTracker.demo.model.User;
import com.billTracker.demo.repository.BillRepository;
import com.billTracker.demo.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;

@RestController // This means that this class is a Controller
@CrossOrigin(origins = "http://localhost:3000")
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class BillController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private BillRepository billRepository;

    @PostMapping(path = "/addBills") // Map ONLY POST Requests
    public ResponseEntity<String> addBills(@RequestBody Map<String, String> billInfo) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Bill b = new Bill();
        b.setTitle(billInfo.get("title"));
        b.setCategory(billInfo.get("category"));
        b.setDescription(billInfo.get("description"));
        Date date= null;
        try {
            date = new SimpleDateFormat("yyyy-MM-dd").parse(billInfo.get("dueDate"));
        } catch (ParseException e) {
            e.printStackTrace();
        }
        b.setDueDate(date);
        float billValue = Float.parseFloat(billInfo.get("value"));
        b.setValue(billValue);
        User u = userRepository.findByEmail(billInfo.get("email"));
        b.setUser(u);
        billRepository.save(b);
        return ResponseEntity.ok().build();
    }

    @GetMapping(path="/bills")
    public Set<Bill> getBills(@RequestParam("email") String email) {

        User u = userRepository.findByEmail(email);
        System.out.println(u.getBills().size());
        return u.getBills();
    }
}
